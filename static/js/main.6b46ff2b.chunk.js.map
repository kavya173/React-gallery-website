{"version":3,"sources":["camera-icon.svg","components/NavigationBar.js","Home.js","About.js","NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","NavigationBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","FlexWrapper","Home","props","About","Wrapper","NoMatch","App","useState","value","setValue","results","setResults","Fragment","exact","path","component","src","logo","height","alt","style","width","type","onChange","e","target","onClick","fetch","then","res","json","data","console","log","map","item","key","urls","regular","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,yC,oiBCG3C,IAAMC,EAASC,IAAOC,IAAV,KAaCC,EAAgB,kBAC3B,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,cACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAE7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,KAAU,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,KAAf,SACV,kBAACK,EAAA,EAAIE,KAAL,KAAU,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,UAAf,e,6PCvBpB,IAAMS,EAAcf,IAAOC,IAAV,KASJe,EAAO,SAACC,GAAD,OAClB,kBAACF,EAAD,KACE,2J,6PCXJ,IAAMA,EAAcf,IAAOC,IAAV,KASJiB,EAAQ,kBACnB,kBAAC,EAAD,KACE,+CACK,2M,sICZT,IAAMC,EAAUnB,IAAOC,IAAV,KAKAmB,EAAU,kBACrB,kBAACD,EAAD,KACE,0C,MC8CWE,MA5Cf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAEPG,EAFO,KAECC,EAFD,KAYb,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KAAK,SAASC,UAAWZ,IAChC,kBAAC,IAAD,CAAOY,UAAWV,KAIxB,yBAAKR,UAAU,WACb,yBAAKmB,IAAKC,IAAMC,OAAO,MAAMC,IAAI,uBACjC,yBAAKtB,UAAU,SACb,wCACA,2BAAOuB,MAAO,CAACC,MAAM,OAAOC,KAAK,OAAOd,MAAOA,EAAOe,SAAU,SAACC,GAAD,OAAKf,EAASe,EAAEC,OAAOjB,UACvF,4BAAQkB,QAAS,WAvBrBC,MAAM,sGAAD,OAAuGnB,EAAvG,sCACJoB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZpB,EAAWoB,EAAKrB,cAmBd,OAEF,yBAAKb,UAAU,WAEXa,EAAQwB,KAAI,SAACC,GACX,OAAO,yBAAMtC,UAAU,OAAOuC,IAAKD,EAAKxC,GAAIqB,IAAMmB,EAAKE,KAAKC,kBChCpDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.6b46ff2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/camera-icon.739b10e5.svg\";","import React from 'react';\r\nimport { Nav, Navbar, Form, FormControl } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .navbar { background-color: #222; }\r\n  a, .navbar-nav, .navbar-light .nav-link {\r\n    color: #9FFFCB;\r\n    &:hover { color: white; }\r\n  }\r\n  .navbar-brand {\r\n    font-size: 2.5em;\r\n    color: #9FFFCB;\r\n    &:hover { color: white; }\r\n  }\r\n \r\n`;\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">My Gallery</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n      \r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item> \r\n          <Nav.Item><Nav.Link href=\"/about\">About</Nav.Link></Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles>\r\n)","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst FlexWrapper = styled.div`\r\n  display: flex;\r\n  grid-gap: 20px;\r\n  margin-top: 3em;\r\n  margin-left: 8em;\r\n  margin-right: 8em;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  grid-auto-rows: minmax(25px, auto);\r\n`;\r\nexport const Home = (props) => (\r\n  <FlexWrapper>\r\n    <h1>\r\n        \"LOOK AND THINK BEFORE OPENING THE SHUTTER.THE HEART AND MIND ARE TRUE LENS OF THE CAMERA.\" This is my Gallery. EXPLORE!!\r\n    </h1>\r\n  </FlexWrapper>\r\n)","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst FlexWrapper = styled.div`\r\n  display: flex;\r\n  grid-gap: 10px;\r\n  margin-top: 1em;\r\n  margin-left: 6em;\r\n  margin-right: 6em;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  grid-auto-rows: minmax(25px, auto);\r\n`; \r\nexport const About = () => (\r\n  <FlexWrapper>\r\n    <h2> About    Page </h2>\r\n         <p>\r\n             This is my assignment project by Boundless Digital Solutions.\r\n            This website allows you to see photos that i have taken.\r\n            I hope it was according to the instructions.\r\n\r\n            ENJOY!\r\n        </p>\r\n  </FlexWrapper>\r\n)","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst Wrapper = styled.div`\r\n  margin-top: 1em;\r\n  margin-left: 6em;\r\n  margin-right: 6em;\r\n`;\r\nexport const NoMatch = () => (\r\n  <Wrapper>\r\n    <h2>No Match</h2>\r\n  </Wrapper>\r\n)","import React,{useState} from 'react';\r\nimport logo from './camera-icon.svg';\r\n//import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Home } from './Home';\r\nimport { About } from './About';\r\nimport { NoMatch } from './NoMatch';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [value,setValue]=useState(\"\")\r\n  const[results,setResults]=useState([])\r\n  //VIIfm4z4alq9dDWW8l9TSvbSM3IjkqGGRLv7s-ELqok:--my access key\r\n  const fetchImages=()=>{\r\n    fetch(`https://api.unsplash.com/search/photos?client_id=VIIfm4z4alq9dDWW8l9TSvbSM3IjkqGGRLv7s-ELqok&query=${value}&orientation=squarish&per_page=60`)\r\n    .then(res=>res.json())\r\n    .then(data=>{\r\n      console.log(data)\r\n      setResults(data.results)\r\n    })\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <NavigationBar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route component={NoMatch} />\r\n        </Switch>\r\n      \r\n    \r\n    <div className=\"website\">\r\n      <img src={logo} height=\"100\" alt=\"Camera-icon's Logo\" />\r\n      <div className=\"mydiv\">\r\n        <span>Search</span>\r\n        <input style={{width:\"60%\"}}type=\"text\" value={value} onChange={(e)=>setValue(e.target.value)}/> \r\n        <button onClick={()=>fetchImages()}>Go</button>\r\n      </div>\r\n      <div className=\"gallery\">\r\n        {\r\n          results.map((item)=>{\r\n            return <img  className=\"item\" key={item.id} src ={item.urls.regular} />\r\n          })\r\n        }\r\n        </div>\r\n    </div>\r\n    </Router>\r\n  </React.Fragment>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}